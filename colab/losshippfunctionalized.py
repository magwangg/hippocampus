# -*- coding: utf-8 -*-
"""losshippfunctionalized.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zlzaeEeYZt6yG9k0Axgu0W8wtMimY-3w
"""

!pip install GPUtil

!pip install pykeops[full] > install.log

import PointCloud
import Midsurface
import mesh
import Optimization
import visualize

import torch

from plotly.offline import init_notebook_mode, iplot, plot
import plotly.graph_objs as go

from scipy.spatial import Delaunay
import pickle

def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext',
            },
          });
        </script>
        '''))

"""# File Imports"""

with open('spline_splines_4_100_ras.df', 'rb') as input:
    surface = pickle.load(input)

with open('spline_splines_4_100_ras_v2.df', 'rb') as input:
    surface2 = pickle.load(input)

with open('spline_splines_4_100_ras_biasedlow.df', 'rb') as input:
    surface3 = pickle.load(input)

with open('targetV_ras', 'rb') as input:
    VH = pickle.load(input)
    
with open('targetF_ras', 'rb') as input:
    FH = pickle.load(input)

with open('targetVds_ras', 'rb') as input:
    VHds = pickle.load(input)
    
with open('targetFds_ras', 'rb') as input:
    FHds = pickle.load(input)

"""# Q Optimization
Optimization of midsurface vertices.
Compare results for 3 different initial midsurfaces.

## Midsurface 1
"""

opt = Optimization.Optimization(surface, VH, FH)

w = 0.48*torch.ones(50**2, 1)
sigmacurrs = [torch.tensor([.96], dtype = opt.torchdtype, device = opt.torchdeviceId), 
              torch.tensor([0.48], dtype = opt.torchdtype, device = opt.torchdeviceId)]
sigmadiffs = [torch.tensor([2.4], dtype = opt.torchdtype, device = opt.torchdeviceId), 
              torch.tensor([1.2], dtype = opt.torchdtype, device = opt.torchdeviceId)]
sigmaw = torch.tensor([3.6], dtype = opt.torchdtype, device = opt.torchdeviceId)
gamma = 0.12
beta = 6

qreslist, wreslist = opt.optimizeQ(w, sigmacurrs, sigmadiffs, sigmaw, gamma, beta, iters = 20)

"""### Optimization Results"""

configure_plotly_browser_state()
init_notebook_mode(connected = False)

figMS = opt.visualizeMidsurface(qreslist[-1])
figJoined = opt.visualizeJoinedsurface(qreslist[-1], wreslist[-1].flatten())
figSourceTarget = opt.visualizeSourceTarget(qreslist[-1], wreslist[-1].flatten(), VHds, FHds)
iplot(figMS)
iplot(figJoined)
iplot(figSourceTarget)

uvw_upper, uvw_lower, uvw_thickness = opt.unfold(qreslist[-1].detach().cpu(), wreslist[-1].flatten().detach().cpu(), wreslist[-1].flatten().detach().cpu())
figW, figThickness = opt.visualizeUnfolded(uvw_upper, uvw_lower, uvw_thickness)
configure_plotly_browser_state()
iplot(figW)
iplot(figThickness)

"""## Midsurface 2"""

opt2 = Optimization.Optimization(surface2, VH, FH)

w = 0.48*torch.ones(50**2, 1)
sigmacurrs = [torch.tensor([.96], dtype = opt.torchdtype, device = opt.torchdeviceId), 
              torch.tensor([0.48], dtype = opt.torchdtype, device = opt.torchdeviceId)]
sigmadiffs = [torch.tensor([2.4], dtype = opt.torchdtype, device = opt.torchdeviceId), 
              torch.tensor([1.2], dtype = opt.torchdtype, device = opt.torchdeviceId)]
sigmaw = torch.tensor([3.6], dtype = opt.torchdtype, device = opt.torchdeviceId)
gamma = 0.12
beta = 6

qreslist2, wreslist2 = opt2.optimizeQ(w, sigmacurrs, sigmadiffs, sigmaw, gamma, beta, iters = 20)

"""### Optimization Results"""

configure_plotly_browser_state()
init_notebook_mode(connected = False)

figMS = opt.visualizeMidsurface(qreslist2[-1])
figJoined = opt.visualizeJoinedsurface(qreslist2[-1], wreslist2[-1].flatten())
figSourceTarget = opt.visualizeSourceTarget(qreslist2[-1], wreslist2[-1].flatten(), VHds, FHds)
iplot(figMS)
iplot(figJoined)
iplot(figSourceTarget)

uvw_upper, uvw_lower, uvw_thickness = opt2.unfold(qreslist2[-1].detach().cpu(), wreslist2[-1].flatten().detach().cpu(), wreslist2[-1].flatten().detach().cpu())
figW, figThickness = opt.visualizeUnfolded(uvw_upper, uvw_lower, uvw_thickness)
configure_plotly_browser_state()
iplot(figW)
iplot(figThickness)

"""## Midsurface 3 (biased)"""

opt3 = Optimization.Optimization(surface3, VH, FH)

w = 0.48*torch.ones(50**2, 1)
sigmacurrs = [torch.tensor([.96], dtype = opt.torchdtype, device = opt.torchdeviceId), 
              torch.tensor([0.48], dtype = opt.torchdtype, device = opt.torchdeviceId)]
sigmadiffs = [torch.tensor([2.4], dtype = opt.torchdtype, device = opt.torchdeviceId), 
              torch.tensor([1.2], dtype = opt.torchdtype, device = opt.torchdeviceId)]
sigmaw = torch.tensor([3.6], dtype = opt.torchdtype, device = opt.torchdeviceId)
gamma = 0.12
beta = 6

qreslist3, wreslist3 = opt3.optimizeQ(w, sigmacurrs, sigmadiffs, sigmaw, gamma, beta, iters = 20)

"""### Optimization Results"""

configure_plotly_browser_state()
init_notebook_mode(connected = False)

figMS = opt.visualizeMidsurface(qreslist3[-1])
figJoined = opt.visualizeJoinedsurface(qreslist3[-1], wreslist3[-1].flatten())
figSourceTarget = opt.visualizeSourceTarget(qreslist3[-1], wreslist3[-1].flatten(), VHds, FHds)
iplot(figMS)
iplot(figJoined)
iplot(figSourceTarget)

uvw_upper, uvw_lower, uvw_thickness = opt3.unfold(qreslist3[-1].detach().cpu(), wreslist3[-1].flatten().detach().cpu(), wreslist3[-1].flatten().detach().cpu())
figW, figThickness = opt.visualizeUnfolded(uvw_upper, uvw_lower, uvw_thickness)
configure_plotly_browser_state()
iplot(figW)
iplot(figThickness)

"""## Comparison of Midsurfaces"""

#Before optimization
configure_plotly_browser_state()
init_notebook_mode(connected = False)

figMS = opt.visualizeMidsurface(qreslist[0])
figMS2 = opt.visualizeMidsurface(qreslist2[0], color = 'Greens')
figMS3 = opt.visualizeMidsurface(qreslist3[0], color = 'Blues')

figMScomb = go.Figure(data = [figMS.data[0], figMS.data[1], figMS.data[2],
                             figMS2.data[0], figMS2.data[1], figMS2.data[2],
                              figMS3.data[0], figMS3.data[1], figMS3.data[2]
                             ])
iplot(figMScomb)

#After optimization
configure_plotly_browser_state()
init_notebook_mode(connected = False)

figMS = opt.visualizeMidsurface(qreslist[-1])
figMS2 = opt.visualizeMidsurface(qreslist2[-1], color = 'Greens')
figMS3 = opt.visualizeMidsurface(qreslist3[-1], color = 'Blues')

figMScomb = go.Figure(data = [figMS.data[0], figMS.data[1], figMS.data[2],
                             figMS2.data[0], figMS2.data[1], figMS2.data[2],
                              figMS3.data[0], figMS3.data[1], figMS3.data[2]
                             ])
iplot(figMScomb)

"""# W Optimization"""

wu = wreslist[-1].clone()
wl = wreslist[-1].clone()
sigmacurrs = [torch.tensor([1], dtype = opt.torchdtype, device = opt.torchdeviceId), 
              torch.tensor([0.6], dtype = opt.torchdtype, device = opt.torchdeviceId)]
sigmaws = [torch.tensor([3], dtype = opt.torchdtype, device = opt.torchdeviceId), 
           torch.tensor([1], dtype = opt.torchdtype, device = opt.torchdeviceId),
          torch.tensor([0.3], dtype = opt.torchdtype, device = opt.torchdeviceId)]
gamma = 1
beta = 1

wureslist, wlreslist = opt.optimizeW(wu, wl, sigmacurrs, sigmaws, gamma, beta)

"""## Optimization Results"""

configure_plotly_browser_state()
init_notebook_mode(connected = False)

figJoined = opt.visualizeJoinedsurfaceNonsymm(qreslist[-1], wureslist[-1].flatten(), wlreslist[-1].flatten())
figSourceTarget = opt.visualizeSourceTargetNonsymm(qreslist[-1], wureslist[-1].flatten(), wlreslist[-1].flatten(),VHds, FHds)
iplot(figJoined)
iplot(figSourceTarget)

uvw_upper, uvw_lower, uvw_thickness = opt.unfold(qreslist[-1].detach().cpu(), wureslist[-1].flatten().detach().cpu(), wlreslist[-1].flatten().detach().cpu())
figW, figThickness = opt.visualizeUnfolded(uvw_upper, uvw_lower, uvw_thickness)
configure_plotly_browser_state()
iplot(figW)
iplot(figThickness)

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

from matplotlib.backends.backend_agg import FigureCanvasAgg
from matplotlib.figure import Figure
import imageio

import numpy as np

images = []
for t in range(len(qreslist)):
    qnp = qreslist[t].detach().cpu().numpy()

    # create Figure
    fig = Figure(figsize=(6, 5), dpi=100)
    # Link canvas to fig
    canvas = FigureCanvasAgg(fig)

    # make the plot
    ax = Axes3D(fig)
    ax.w_xaxis.set_pane_color((1.0, 1.0, 1.0, 1.0))
    ax.w_yaxis.set_pane_color((1.0, 1.0, 1.0, 1.0))
    ax.w_zaxis.set_pane_color((1.0, 1.0, 1.0, 1.0))
    ax.plot_trisurf(qnp[:, 0],  qnp[:, 1],  qnp[:, 2],  triangles=opt.FS, color=(1, 0, 0, .5), edgecolor=(1, 0, 0, .3),  linewidth=1)

    ax.set_title('Q Optimization, step ' + str(t))

    # draw it!
    canvas.draw()

    # save plot in a numpy array through buffer
    s, (width, height) = canvas.print_to_buffer()
    images.append(np.frombuffer(s, np.uint8).reshape((height, width, 4)))

imageio.mimsave('Qoptimization.gif', images, duration=.5)

images = []
FSj = mesh.joinFlip(opt.FS, opt.m, opt.n)
facemap = mesh.incidentFaceMap(2*opt.m*opt.n, FSj)

for t in range(len(wureslist)):
    Qd = mesh.doubleQ(opt.Q)
    V = mesh.generateSourceULnonsymm(Qd, wureslist[t], wlreslist[t], FSj, facemap)
    wunp = wureslist[t].detach().cpu().numpy()
    wlnp = wlreslist[t].detach().cpu().numpy()
    Vnp = V.detach().cpu().numpy()
 
    # create Figure
    fig = Figure(figsize=(6, 5), dpi=100)
    # Link canvas to fig
    canvas = FigureCanvasAgg(fig)

    # make the plot
    ax = Axes3D(fig)
    ax.w_xaxis.set_pane_color((1.0, 1.0, 1.0, 1.0))
    ax.w_yaxis.set_pane_color((1.0, 1.0, 1.0, 1.0))
    ax.w_zaxis.set_pane_color((1.0, 1.0, 1.0, 1.0))
    ax.plot_trisurf(Vnp[:, 0],  Vnp[:, 1],  Vnp[:, 2],  triangles=FSj, color=(0, 0, 0, 0), edgecolor=(0, 0, 1, 0.3),  linewidth=1)

    ax.set_title('Q Optimization, step ' + str(t))

    # draw it!
    canvas.draw()

    # save plot in a numpy array through buffer
    s, (width, height) = canvas.print_to_buffer()
    images.append(np.frombuffer(s, np.uint8).reshape((height, width, 4)))

imageio.mimsave('Woptimization.gif', images, duration=.5)